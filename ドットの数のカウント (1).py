# -*- coding: utf-8 -*-
"""ドットの数のカウント.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z1YJyWz34J_ISFtjNk2hN1PKBC2pSk9P
"""

pip install selenium pillow

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from PIL import Image
import time

# ChromeDriverのパス
chromedriver_path = r"C:\WebDriver\chromedriver.exe"  # ここに実際のパスを記入

# 保存するパス
save_path = r"/mnt/data/スクリーンショット 2024-05-26 091014.png"

# ブラウザの設定
options = webdriver.ChromeOptions()
options.add_argument('--headless')  # ヘッドレスモードで実行
options.add_argument('--start-maximized')  # ウィンドウを最大化

# ChromeDriverのサービスを作成
service = Service(executable_path=chromedriver_path)

# WebDriverを起動
driver = webdriver.Chrome(service=service, options=options)

# ウェブページを開く
url = 'http://.com'  # ここにスクリーンショットを撮りたいページのURLを入力
driver.get(url)

# ページが完全に読み込まれるまで待つ
time.sleep(5)

# ページ全体のスクリーンショットを撮る
screenshot = driver.get_screenshot_as_png()

# スクリーンショットを画像として保存
with open(save_path, 'wb') as f:
    f.write(screenshot)

# ブラウザを終了
driver.quit()

# 確認のため画像を表示（オプション）
image = Image.open(save_path)
image.show()

from PIL import Image

# 画像を開く
image_path =  r'/mnt/data/スクリーンショット 2024-05-26 091014.png'#22行目と同じパス
image = Image.open(image_path)
pixels = image.load()

# 赤、青、白のピクセルのカウント変数
red_count = 0
blue_count = 0
white_count = 0

# 画像のサイズを取得
width, height = image.size
pixels = image.load()

# ピクセルごとに色をチェック
for y in range(height):
    for x in range(width):
        r, g, b = pixels[x, y][:3]  # (R, G, B)の値を取得

        if r > 200 and g < 50 and b < 50:
            red_count += 1
        elif r < 50 and g < 50 and b > 200:
            blue_count += 1
        elif r > 200 and g > 200 and b > 200:
            white_count += 1

# 結果を表示
total_pixels = width * height
red_percentage = (red_count / total_pixels) * 100
blue_percentage = (blue_count / total_pixels) * 100
white_percentage = (white_count / total_pixels) * 100

(red_count, red_percentage, blue_count, blue_percentage, white_count, white_percentage)
